/**
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶

示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
**/

/**
  思考过程：
  1. 假设爬第 i 阶楼层有 dp[i] 种方法，则如有 n 个台阶，需要求出目标为 dp[n]
  2. 列出状态转移方程，由于可以选择爬 1 或 2 个台阶，则相当于每次可以在前次的基础上作出两种选择，则状态转移方程为：dp[i] = dp[i - 1] + dp[i - 2]
  3. 解决初始状态：
    - 没有台阶时，dp[0] 为 0
    - 1 阶台阶时，dp[1] 为 1
    - 2 阶台阶时，dp[2] 为 2
**/

/**
 * @param {number} n
 * @return {number}
 */
var climbStairs = function(n) {
  if (n === 0) return 0
  if (n === 1) return 1
  if (n === 2) return 2
  
  var dp = []
  dp[0] = 0
  dp[1] = 1
  dp[2] = 2
  for (var i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2]
  }
  return dp[n]
};



console.log(climbStairs(3))
