/** 
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？
说明：m 和 n 的值均不超过 100。

示例 1:

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
*/

/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
 
/**
  思考过程：
  1. 确定目标：假设 dp[i][j] 为走到第 i 行，第 j 列的当前位置时一共有多少条路径，那么该题目标即为 dp[m-1][n-1]
  2. 确立方程式：机器人每到一个点，为了离终点更近，只能选择往右或者往下走，也就是说，可以到达一个点的所有方法，是到达其上方或左边的点的总和。
     也就能得出该状态转移方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]
  3. 搞定初始条件：当 i = 0 或 j = 0时，机器人处于第一行或者第一列的状态下，不存在其左边或者上方的点，所以需要对其作出区分。
     当 dp[0][0...n-1] 时，相当于机器人要到达的点是第一行的某个位置，也就只能一直往左走这一种走法，所以 dp[0][0...n-1] = 1
     当 dp[0...m-1][0] 时，相当于机器人要到达的点是第一列的某个位置，也就只能一直往下走这一种走法，所以 dp[0...m-1][0] = 1
  4. 根据以上关系，写出函数
**/
var uniquePaths = function(m, n) {
  if (m <= 0 || n <= 0) {
    return 1
  }
  var dp = new Array(m).fill(new Array(n))
  // 初始化
  for (let i = 0; i < m; i++) {
    dp[i][0] = 1
  }
  for (let i = 0; i < n; i++) {
    dp[0][i] = 1
  }
  for (let i = 1; i < m; i++) {
    for (let j = 1; j < n; j++) {
      dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
    }
  }
  return dp[m - 1][n - 1]
};

console.log(uniquePaths(3, 2))