/**
 * 剑指 Offer 15. 二进制中1的个数
 * 请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。
 * 示例 1：
 * 
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 * 
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 * 
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 
 */

/**
 * @param {number} n - a positive integer
 * @return {number}
 */
function hammingWeight (n) {
    /**
     * 做题思路1：
     * 把 n 和 1 做与运算，判断最低位是否为 1，然后把 1 左移一位(<<)继续与 n 做与运算, 直到遍历完为止
     * 该方法输入的二进制数有多少位就要进行多少次与运算，javascript 最大能支持多少位就要循环多少次
     */
    let count = 0
    let flag = 1
    while (flag) {
      // flag 不断左移，最后会超出 javascript 最大数值，重新变为 0
      if (flag & n) count++
      flag = flag << 1
    }
    return count
}

/**
 * @param {number} n - a positive integer
 * @return {number}
 */
function hammingWeight2 (n) {
  /**
   * 做题思路2：
   * 数学方法：讲一个整数减去 1 之后再和原来的整数做与运算，得到的结果相当于把整数的二进制表示中最右边的 1 变成 0
   * 所以我们只要对输入的整数不停的进行与运算，在 n 变成 0 之前运算了多少次就有多少个 1
   */
  let count = 0
  while (n) {
    count++
    n = n & (n - 1)
  }
  return count
}



console.log(hammingWeight2(parseInt('00000000000000000000000110000000', 2)))
